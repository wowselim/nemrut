/*
 * This file is generated by jOOQ.
 */
package co.selim.nemrut.jooq.tables;


import co.selim.nemrut.jooq.Keys;
import co.selim.nemrut.jooq.Public;
import co.selim.nemrut.jooq.tables.records.SalaryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Salary extends TableImpl<SalaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.salary</code>
     */
    public static final Salary SALARY = new Salary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalaryRecord> getRecordType() {
        return SalaryRecord.class;
    }

    /**
     * The column <code>public.salary.id</code>.
     */
    public final TableField<SalaryRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.salary.role_id</code>.
     */
    public final TableField<SalaryRecord, UUID> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.salary.company_id</code>.
     */
    public final TableField<SalaryRecord, UUID> COMPANY_ID = createField(DSL.name("company_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.salary.currency</code>.
     */
    public final TableField<SalaryRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.CHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.salary.amount</code>.
     */
    public final TableField<SalaryRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.salary.created_at</code>.
     */
    public final TableField<SalaryRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.salary.updated_at</code>.
     */
    public final TableField<SalaryRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Salary(Name alias, Table<SalaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Salary(Name alias, Table<SalaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.salary</code> table reference
     */
    public Salary(String alias) {
        this(DSL.name(alias), SALARY);
    }

    /**
     * Create an aliased <code>public.salary</code> table reference
     */
    public Salary(Name alias) {
        this(alias, SALARY);
    }

    /**
     * Create a <code>public.salary</code> table reference
     */
    public Salary() {
        this(DSL.name("salary"), null);
    }

    public <O extends Record> Salary(Table<O> child, ForeignKey<O, SalaryRecord> key) {
        super(child, key, SALARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SalaryRecord> getPrimaryKey() {
        return Keys.SALARY_PKEY;
    }

    @Override
    public List<ForeignKey<SalaryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SALARY__SALARY_ROLE_ID_FKEY, Keys.SALARY__SALARY_COMPANY_ID_FKEY);
    }

    private transient Role _role;
    private transient Company _company;

    /**
     * Get the implicit join path to the <code>public.role</code> table.
     */
    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.SALARY__SALARY_ROLE_ID_FKEY);

        return _role;
    }

    /**
     * Get the implicit join path to the <code>public.company</code> table.
     */
    public Company company() {
        if (_company == null)
            _company = new Company(this, Keys.SALARY__SALARY_COMPANY_ID_FKEY);

        return _company;
    }

    @Override
    public Salary as(String alias) {
        return new Salary(DSL.name(alias), this);
    }

    @Override
    public Salary as(Name alias) {
        return new Salary(alias, this);
    }

    @Override
    public Salary as(Table<?> alias) {
        return new Salary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salary rename(String name) {
        return new Salary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salary rename(Name name) {
        return new Salary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salary rename(Table<?> name) {
        return new Salary(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, UUID, UUID, String, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super UUID, ? super UUID, ? super UUID, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super UUID, ? super UUID, ? super UUID, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
